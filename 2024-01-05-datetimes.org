#+TITLE: Dates and times
#+DATE: <2024-01-05 Fri>

/Note: I've made some updates to this note to reflect what I've
learned in the last few days./

Date and time handling is notoriously hard. Each language and
environment I've dabbled with has handled it differently, and all have
both pros and cons.

Interestingly, even time zones are complex. [[https://mm.icann.org/pipermail/tz-announce/2023-December/000080.html][IANA's time zone database
released 4 updates in 2023 alone]]. Cities change timezones, and not
just for daylight savings time. Fixing a date and time to a IANA time
zone, or even a UTC offset, is not guaranteed to be useful.

Recently I've been writing some elisp that deals in date-times, and,
boy, is it lacking in this area.

Elisp represents points in time in two ways:

- A number of seconds, sometimes called an 'encoded timestamp':
  - Integral or even floating point timestamps. Often referred to as
    "unix time stamps." The number of seconds since Jan 1, 1970. These
    are also somewhat useful, depending on what you're doing.
  - A pair in the format ~(TICKS . HZ)~. Uncommon. Insane.
  - ~(HIGH LOW MICRO PICO)~. I gather this has something to do with Lisp
    a very, very long time ago. The least useful of all.
- "Calendrical date-times", or a ~decoded-time~, which are a list of the format ~(SECOND
  MINUTE HOUR DAY MONTH YEAR IGNORED DST ZONE)~. These are the most
  useful and manipulable.

Today I needed to be able to find the date-time of midnight of the
current day in the current time zone, and for tomorrow as well. In
Python, I might do something like:

#+begin_src python
  from datetime import datetime, timedelta, timezone

  # confusingly, the astimezone() converts the timezone-naive datetime
  # to a timezone-aware datetime with the system's timezone
  now = datetime.now().astimezone()

  # create a copy of now with the time modified. does not mutate.
  midnight = now.replace(hour=0, minute=0, second=0, microsecond=0)
  tomorrow = midnight + timedelta(days=1)

  print(midnight.astimezone(timezone.utc))
  # > 2024-01-05 08:00:00+00:00
  print(tomorrow.astimezone(timezone.utc))
  # > 2024-01-06 08:00:00+00:00
#+end_src

Pretty straightforward. I get the current time (as a naive date-time),
set the associated timezone to the system timezone, modify the time
portion to midnight, and represent it as UTC. For tomorrow, I can just
add one day.

In emacs, we can approximate the above, although it's somewhat more
verbose:

#+begin_src elisp
  ;; `current-time' is a numeric timestamp (exact format varies), but we
  ;; need to work in `decoded-time's.
  (let* ((now (current-time))
         (midnight (decode-time now))) ;; simple copy

    ;; set the struct fields for hour, minute and second to 0 for
    ;; midnight
    (setf (decoded-time-hour midnight) 0
          (decoded-time-minute midnight) 0
          (decoded-time-second midnight) 0)

    ;; add 1 day to midnight
    (let ((tomorrow (decoded-time-add midnight
                                      (make-decoded-time :day 1))))
      ;; we now have decoded-time/calendrical date-times that refer to
      ;; the proper points in time. convert them to numeric timestamps
      ;; for use with, eg, `format-time-string'.
      (message "Midnight is %s"
               (format-time-string "%FT%T%z" (encode-time midnight)))
      (message "Midnight tomorrow is %s"
               (format-time-string "%FT%T%z" (encode-time tomorrow)))))
#+end_src

The API I am working with requires these dates in UTC, while
~midnight~ and ~tomorrow~ are in the system local timezone. I've yet
to discover how to convert these (possibly just subtract the UTC
offset manually?), but, fortunately, I only need a string.

Handily, ~format-time-string~ takes a timezone as an argument, and if
~t~ is passed, it will convert to UTC before formatting.

#+begin_src elisp
  (let ((now (current-time)))
    (message "Local is %s, UTC is %s."
             (format-time-string "%FT%T%z" now)
             (format-time-string "%FT%T%z" now t)))
#+end_src

#+RESULTS:
: Local is 2024-01-06T11:54:19-0800, UTC is 2024-01-06T19:54:19+0000.

Perfect!
